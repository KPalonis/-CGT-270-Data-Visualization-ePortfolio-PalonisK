<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20204.21.0114.0916                               -->
<workbook original-version='18.1' source-build='2020.4.1 (20204.21.0114.0916)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='query (Mag6PlusEarthquakes_1900-2013)' inline='true' name='federated.1w3s5me1qqv7sx13qvl1d1xochkj' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Mag6PlusEarthquakes_1900-2013' name='excel-direct.08cnw831db5lzx17i13pg04vdbn7'>
            <connection class='excel-direct' cleaning='yes' compat='no' dataRefreshTime='' filename='//nas01.itap.purdue.edu/puhome/My Documents/Downloads/Mag6PlusEarthquakes_1900-2013.xlsx' interpretationMode='1' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.08cnw831db5lzx17i13pg04vdbn7' name='query' table='[query$]' type='table'>
          <columns gridOrigin='A1:R8319:no:A1:R8319:1' header='yes' lost='0' outcome='1' processed='60431'>
            <column datatype='string' name='time' ordinal='0' />
            <column datatype='date' name='Date' ordinal='1' />
            <column datatype='datetime' name='Time' ordinal='2' />
            <column datatype='real' name='F4' ordinal='3' />
            <column datatype='real' name='latitude' ordinal='4' />
            <column datatype='real' name='longitude' ordinal='5' />
            <column datatype='real' name='depth' ordinal='6' />
            <column datatype='real' name='mag' ordinal='7' />
            <column datatype='string' name='magType' ordinal='8' />
            <column datatype='integer' name='nst' ordinal='9' />
            <column datatype='real' name='gap' ordinal='10' />
            <column datatype='real' name='dmin' ordinal='11' />
            <column datatype='real' name='rms' ordinal='12' />
            <column datatype='string' name='net' ordinal='13' />
            <column datatype='string' name='id' ordinal='14' />
            <column datatype='string' name='updated' ordinal='15' />
            <column datatype='string' name='place' ordinal='16' />
            <column datatype='string' name='type' ordinal='17' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.08cnw831db5lzx17i13pg04vdbn7' name='query' table='[query$]' type='table'>
          <columns gridOrigin='A1:R8319:no:A1:R8319:1' header='yes' lost='0' outcome='1' processed='60431'>
            <column datatype='string' name='time' ordinal='0' />
            <column datatype='date' name='Date' ordinal='1' />
            <column datatype='datetime' name='Time' ordinal='2' />
            <column datatype='real' name='F4' ordinal='3' />
            <column datatype='real' name='latitude' ordinal='4' />
            <column datatype='real' name='longitude' ordinal='5' />
            <column datatype='real' name='depth' ordinal='6' />
            <column datatype='real' name='mag' ordinal='7' />
            <column datatype='string' name='magType' ordinal='8' />
            <column datatype='integer' name='nst' ordinal='9' />
            <column datatype='real' name='gap' ordinal='10' />
            <column datatype='real' name='dmin' ordinal='11' />
            <column datatype='real' name='rms' ordinal='12' />
            <column datatype='string' name='net' ordinal='13' />
            <column datatype='string' name='id' ordinal='14' />
            <column datatype='string' name='updated' ordinal='15' />
            <column datatype='string' name='place' ordinal='16' />
            <column datatype='string' name='type' ordinal='17' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>time</remote-name>
            <remote-type>130</remote-type>
            <local-name>[time]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>time</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Date]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Time</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Time]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>Time</remote-alias>
            <ordinal>2</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F4</remote-name>
            <remote-type>5</remote-type>
            <local-name>[F4]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>F4</remote-alias>
            <ordinal>3</ordinal>
            <hidden>true</hidden>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>latitude</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>longitude</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>depth</remote-name>
            <remote-type>5</remote-type>
            <local-name>[depth]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>depth</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mag</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mag]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>mag</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>magType</remote-name>
            <remote-type>130</remote-type>
            <local-name>[magType]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>magType</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>nst</remote-name>
            <remote-type>20</remote-type>
            <local-name>[nst]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>nst</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>gap</remote-name>
            <remote-type>5</remote-type>
            <local-name>[gap]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>gap</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dmin</remote-name>
            <remote-type>5</remote-type>
            <local-name>[dmin]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>dmin</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rms</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rms]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>rms</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>net</remote-name>
            <remote-type>130</remote-type>
            <local-name>[net]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>net</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>id</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>updated</remote-name>
            <remote-type>130</remote-type>
            <local-name>[updated]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>updated</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>place</remote-name>
            <remote-type>130</remote-type>
            <local-name>[place]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>place</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[type]</local-name>
            <parent-name>[query]</parent-name>
            <remote-alias>type</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[query]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:R8319:no:A1:R8319:1&quot;</attribute>
              <attribute datatype='integer' name='lost'>0</attribute>
              <attribute datatype='integer' name='outcome'>1</attribute>
              <attribute datatype='integer' name='processed'>60431</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' hidden='true' name='[F4]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='query' datatype='table' name='[__tableau_internal_object_id__].[query_46801CFFF05A4B69A681B9992F07E972]' role='measure' type='quantitative' />
      <column caption='Depth' datatype='real' name='[depth]' role='measure' type='quantitative' />
      <column caption='Dmin' datatype='real' name='[dmin]' role='measure' type='quantitative' />
      <column caption='Gap' datatype='real' name='[gap]' role='measure' type='quantitative' />
      <column caption='Id' datatype='string' name='[id]' role='dimension' type='nominal' />
      <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
      <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
      <column caption='Mag Type' datatype='string' name='[magType]' role='dimension' type='nominal' />
      <column caption='Mag' datatype='real' name='[mag]' role='measure' type='quantitative' />
      <column caption='Net' datatype='string' name='[net]' role='dimension' type='nominal' />
      <column caption='Nst' datatype='integer' name='[nst]' role='measure' type='quantitative' />
      <column caption='Place' datatype='string' name='[place]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
        <semantic-values semantic-role='[Country].[Name]'>
          <semantic-value key='&quot;101km SW of Atka, Alaska&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;101km WSW of Mutis, Colombia&quot;' value='&quot;Colombia&quot;' />
          <semantic-value key='&quot;108km E of Miyako, Japan&quot;' value='&quot;Japan&quot;' />
          <semantic-value key='&quot;110km NW of Nago, Japan&quot;' value='&quot;Japan&quot;' />
          <semantic-value key='&quot;111km NNE of Tobelo, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;111km NNW of Nggilat, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;114km WSW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;115km ENE of Taron, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
          <semantic-value key='&quot;115km WNW of Raoul Island, New Zealand&quot;' value='&quot;New Zealand&quot;' />
          <semantic-value key='&quot;116km NW of L&apos;Esperance Rock, New Zealand&quot;' value='&quot;New Zealand&quot;' />
          <semantic-value key='&quot;117km W of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;118km SSW of Atka, Alaska&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;118km WNW of Raoul Island, New Zealand&quot;' value='&quot;New Zealand&quot;' />
          <semantic-value key='&quot;122km WNW of Panguna, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
          <semantic-value key='&quot;133km NW of Hihifo, Tonga&quot;' value='&quot;Tonga&quot;' />
          <semantic-value key='&quot;134km SE of Kuril&apos;sk, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;135km SE of Severo-Kuril&apos;sk, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;135km WSW of Druzhina, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;138km NNW of Amukta Island, Alaska&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;140km WNW of Neiafu, Tonga&quot;' value='&quot;Tonga&quot;' />
          <semantic-value key='&quot;142km SW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;144km W of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;152km ESE of Neiafu, Tonga&quot;' value='&quot;Tonga&quot;' />
          <semantic-value key='&quot;157km SW of Sungaipenuh, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;15km NNE of Kunisaki-shi, Japan&quot;' value='&quot;Japan&quot;' />
          <semantic-value key='&quot;167km NW of Ceva-i-Ra, Fiji&quot;' value='&quot;Fiji&quot;' />
          <semantic-value key='&quot;16km SE of Caburan, Philippines&quot;' value='&quot;Philippines&quot;' />
          <semantic-value key='&quot;170km NNE of Bathsheba, Barbados&quot;' value='&quot;Barbados&quot;' />
          <semantic-value key='&quot;172km S of Ust&apos;-Kamchatsk Staryy, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;180km SE of Lorengau, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
          <semantic-value key='&quot;182km SW of Bella Bella, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;187km WSW of Bella Bella, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;189km SSE of L&apos;Esperance Rock, New Zealand&quot;' value='&quot;New Zealand&quot;' />
          <semantic-value key='&quot;189km WNW of Saumlaki, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;18km N of Shandon, California&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;18km W of Chivay, Peru&quot;' value='&quot;Peru&quot;' />
          <semantic-value key='&quot;18km WNW of San Marcos, Mexico&quot;' value='&quot;Mexico&quot;' />
          <semantic-value key='&quot;19km SSW of Obihiro, Japan&quot;' value='&quot;Japan&quot;' />
          <semantic-value key='&quot;1km E of Lixourion, Greece&quot;' value='&quot;Greece&quot;' />
          <semantic-value key='&quot;20km NNW of La Union, Mexico&quot;' value='&quot;Mexico&quot;' />
          <semantic-value key='&quot;21km SSE of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;239km NNE of Ceva-i-Ra, Fiji&quot;' value='&quot;Fiji&quot;' />
          <semantic-value key='&quot;23km ESE of Aitape, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
          <semantic-value key='&quot;23km ESE of Suncho Corral, Argentina&quot;' value='&quot;Argentina&quot;' />
          <semantic-value key='&quot;240km E of Enarotali, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;247km E of Kuril&apos;sk, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;251km ENE of Kuril&apos;sk, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;25km S of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;25km S of Paracas, Peru&quot;' value='&quot;Peru&quot;' />
          <semantic-value key='&quot;25km SE of Buli, Taiwan&quot;' value='&quot;Taiwan&quot;' />
          <semantic-value key='&quot;272km ESE of Hotan, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;27km NNW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;282km SW of Vaini, Tonga&quot;' value='&quot;Tonga&quot;' />
          <semantic-value key='&quot;283km SW of Vaini, Tonga&quot;' value='&quot;Tonga&quot;' />
          <semantic-value key='&quot;292km NW of Raoul Island, New Zealand&quot;' value='&quot;New Zealand&quot;' />
          <semantic-value key='&quot;29km NE of Kandrian, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
          <semantic-value key='&quot;29km SE of Blenheim, New Zealand&quot;' value='&quot;New Zealand&quot;' />
          <semantic-value key='&quot;2km N of Yacuanquer, Colombia&quot;' value='&quot;Colombia&quot;' />
          <semantic-value key='&quot;31km N of Rabaul, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
          <semantic-value key='&quot;31km SE of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;31km W of Platanos, Greece&quot;' value='&quot;Greece&quot;' />
          <semantic-value key='&quot;32km E of Finschhafen, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
          <semantic-value key='&quot;33km SW of Jiquilillo, Nicaragua&quot;' value='&quot;Nicaragua&quot;' />
          <semantic-value key='&quot;35km NNE of Masterton, New Zealand&quot;' value='&quot;New Zealand&quot;' />
          <semantic-value key='&quot;36km N of Gueiria, Venezuela&quot;' value='&quot;Venezuela&quot;' />
          <semantic-value key='&quot;36km SSW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;38km SSE of Adipala, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;40km W of Agrihan, Northern Mariana Islands&quot;' value='&quot;Northern Mariana Islands&quot;' />
          <semantic-value key='&quot;41km SSW of Coquimbo, Chile&quot;' value='&quot;Chile&quot;' />
          <semantic-value key='&quot;46km ESE of Blenheim, New Zealand&quot;' value='&quot;New Zealand&quot;' />
          <semantic-value key='&quot;46km SSE of Acari, Peru&quot;' value='&quot;Peru&quot;' />
          <semantic-value key='&quot;46km SSW of Hualian, Taiwan&quot;' value='&quot;Taiwan&quot;' />
          <semantic-value key='&quot;46km W of Masachapa, Nicaragua&quot;' value='&quot;Nicaragua&quot;' />
          <semantic-value key='&quot;47km SSW of Sigli, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;48km WSW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;4km SE of Sagbayan, Philippines&quot;' value='&quot;Philippines&quot;' />
          <semantic-value key='&quot;50km NE of Namie, Japan&quot;' value='&quot;Japan&quot;' />
          <semantic-value key='&quot;53km SW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;53km WSW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;55km S of Bireun, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;56km NNE of Vallenar, Chile&quot;' value='&quot;Chile&quot;' />
          <semantic-value key='&quot;56km WSW of Linqiong, China&quot;' value='&quot;Chile&quot;' />
          <semantic-value key='&quot;58km WSW of Agrihan, Northern Mariana Islands&quot;' value='&quot;Northern Mariana Islands&quot;' />
          <semantic-value key='&quot;59km E of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;59km S of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;60km E of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;60km SE of Kegen, Kazakhstan&quot;' value='&quot;Kazakhstan&quot;' />
          <semantic-value key='&quot;60km WNW of Iquique, Chile&quot;' value='&quot;Chile&quot;' />
          <semantic-value key='&quot;61km N of Hatillo, Puerto Rico&quot;' value='&quot;Puerto Rico&quot;' />
          <semantic-value key='&quot;61km NNE of Awaran, Pakistan&quot;' value='&quot;Pakistan&quot;' />
          <semantic-value key='&quot;61km S of Pirgos, Greece&quot;' value='&quot;Greece&quot;' />
          <semantic-value key='&quot;62km WSW of Panguna, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
          <semantic-value key='&quot;66km SW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;66km WSW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;67km WSW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;69km SE of Sinabang, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;6km ENE of Santa Catarina Pinula, Guatemala&quot;' value='&quot;Guatemala&quot;' />
          <semantic-value key='&quot;6km W of Sechura, Peru&quot;' value='&quot;Peru&quot;' />
          <semantic-value key='&quot;76km W of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;77km SSW of Atka, Alaska&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;77km W of Panguna, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
          <semantic-value key='&quot;77km WNW of Ferndale, California&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;78km NE of L&apos;Esperance Rock, New Zealand&quot;' value='&quot;New Zealand&quot;' />
          <semantic-value key='&quot;7km NNW of Lixourion, Greece&quot;' value='&quot;Greece&quot;' />
          <semantic-value key='&quot;7km SSE of Ciudad Tecun Uman, Guatemala&quot;' value='&quot;Guatemala&quot;' />
          <semantic-value key='&quot;80km WNW of Iquique, Chile&quot;' value='&quot;Chile&quot;' />
          <semantic-value key='&quot;81km S of Pirgos, Greece&quot;' value='&quot;Greece&quot;' />
          <semantic-value key='&quot;81km SSE of Panguna, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
          <semantic-value key='&quot;81km SSW of Atka, Alaska&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;82km NNE of Hihifo, Tonga&quot;' value='&quot;Tonga&quot;' />
          <semantic-value key='&quot;82km SSW of Atka, Alaska&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;83km E of Khash, Iran&quot;' value='&quot;Iran&quot;' />
          <semantic-value key='&quot;84km SE of Ozernovskiy, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;85km NNE of Awaran, Pakistan&quot;' value='&quot;Pakistan&quot;' />
          <semantic-value key='&quot;86km NW of Nuku`alofa, Tonga&quot;' value='&quot;Tonga&quot;' />
          <semantic-value key='&quot;88km W of Constitucion, Chile&quot;' value='&quot;Chile&quot;' />
          <semantic-value key='&quot;89km SE of Bandar Bushehr, Iran&quot;' value='&quot;Iran&quot;' />
          <semantic-value key='&quot;89km SE of Ozernovskiy, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;91km SSE of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
          <semantic-value key='&quot;93km SE of Ozernovskiy, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;94km NNE of L&apos;Esperance Rock, New Zealand&quot;' value='&quot;New Zealand&quot;' />
          <semantic-value key='&quot;94km SE of Minab, Iran&quot;' value='&quot;Iran&quot;' />
          <semantic-value key='&quot;96km WSW of Paita, Peru&quot;' value='&quot;Peru&quot;' />
          <semantic-value key='&quot;97km SE of Severo-Kuril&apos;sk, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;98km W of Panguna, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
          <semantic-value key='&quot;99km SW of Etchoropo, Mexico&quot;' value='&quot;Mexico&quot;' />
          <semantic-value key='&quot;9km N of Zarubino, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;Acre, Brazil&quot;' value='&quot;Brazil&quot;' />
          <semantic-value key='&quot;Admiralty Islands region, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
          <semantic-value key='&quot;Aisen, Chile&quot;' value='&quot;Chile&quot;' />
          <semantic-value key='&quot;Alamagan region, Northern Mariana Islands&quot;' value='&quot;Northern Mariana Islands&quot;' />
          <semantic-value key='&quot;Alaska Peninsula&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;Amazonas, Brazil&quot;' value='&quot;Brazil&quot;' />
          <semantic-value key='&quot;Amurskaya Oblast&apos;, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;Anatahan region, Northern Mariana Islands&quot;' value='&quot;Northern Mariana Islands&quot;' />
          <semantic-value key='&quot;Andaman Islands, India region&quot;' value='&quot;India&quot;' />
          <semantic-value key='&quot;Andreanof Islands, Aleutian Islands, Alaska&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;Antofagasta, Chile&quot;' value='&quot;Chile&quot;' />
          <semantic-value key='&quot;Anzoategui, Venezuela&quot;' value='&quot;Venezuela&quot;' />
          <semantic-value key='&quot;Apure, Venezuela&quot;' value='&quot;Venezuela&quot;' />
          <semantic-value key='&quot;Araucania, Chile&quot;' value='&quot;Chile&quot;' />
          <semantic-value key='&quot;Assam, India&quot;' value='&quot;India&quot;' />
          <semantic-value key='&quot;Atacama, Chile&quot;' value='&quot;Chile&quot;' />
          <semantic-value key='&quot;Auckland Islands, New Zealand region&quot;' value='&quot;New Zealand&quot;' />
          <semantic-value key='&quot;Azores Islands, Portugal&quot;' value='&quot;Poland&quot;' />
          <semantic-value key='&quot;Babuyan Islands region, Philippines&quot;' value='&quot;Philippines&quot;' />
          <semantic-value key='&quot;Baffin Island region, Nunavut, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;Baja California Sur, Mexico&quot;' value='&quot;Mexico&quot;' />
          <semantic-value key='&quot;Baja California, Mexico&quot;' value='&quot;Mexico&quot;' />
          <semantic-value key='&quot;Bali region, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Batan Islands region, Philippines&quot;' value='&quot;Philippines&quot;' />
          <semantic-value key='&quot;Beni, Bolivia&quot;' value='&quot;Bolivia&quot;' />
          <semantic-value key='&quot;Biak region, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Bio-Bio, Chile&quot;' value='&quot;Chile&quot;' />
          <semantic-value key='&quot;Bo Hai, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Bohol, Philippines&quot;' value='&quot;Philippines&quot;' />
          <semantic-value key='&quot;Bonin Islands, Japan region&quot;' value='&quot;Japan&quot;' />
          <semantic-value key='&quot;Bougainville region, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
          <semantic-value key='&quot;British Columbia, Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;Buru, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Caspian Sea, offshore Azerbaijan&quot;' value='&quot;Azerbaijan&quot;' />
          <semantic-value key='&quot;Caspian Sea, offshore Turkmenistan&quot;' value='&quot;Turkmenistan&quot;' />
          <semantic-value key='&quot;Catamarca, Argentina&quot;' value='&quot;Argentina&quot;' />
          <semantic-value key='&quot;Catanduanes, Philippines&quot;' value='&quot;Philippines&quot;' />
          <semantic-value key='&quot;Caucasus region, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;Cayman Islands region&quot;' value='&quot;Cayman Islands&quot;' />
          <semantic-value key='&quot;central Afghanistan&quot;' value='&quot;Afghanistan&quot;' />
          <semantic-value key='&quot;Central Alaska&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;Central California&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;central Iran&quot;' value='&quot;Iran&quot;' />
          <semantic-value key='&quot;central Italy&quot;' value='&quot;Italy&quot;' />
          <semantic-value key='&quot;central Mongolia&quot;' value='&quot;Mongolia&quot;' />
          <semantic-value key='&quot;central Peru&quot;' value='&quot;Peru&quot;' />
          <semantic-value key='&quot;central Turkey&quot;' value='&quot;Turkey&quot;' />
          <semantic-value key='&quot;Ceram Sea, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Chatham Islands, New Zealand region&quot;' value='&quot;New Zealand&quot;' />
          <semantic-value key='&quot;Chiapas, Mexico&quot;' value='&quot;Mexico&quot;' />
          <semantic-value key='&quot;Chitinskaya Oblast&apos;, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;Chukotskiy Avtonomnyy Okrug, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;Chuquisaca, Bolivia&quot;' value='&quot;Bolivia&quot;' />
          <semantic-value key='&quot;Cochabamba, Bolivia&quot;' value='&quot;Bolivia&quot;' />
          <semantic-value key='&quot;Colima, Mexico&quot;' value='&quot;Mexico&quot;' />
          <semantic-value key='&quot;Cook Strait, New Zealand&quot;' value='&quot;New Zealand&quot;' />
          <semantic-value key='&quot;Coquimbo, Chile&quot;' value='&quot;Chile&quot;' />
          <semantic-value key='&quot;Cordoba, Argentina&quot;' value='&quot;Argentina&quot;' />
          <semantic-value key='&quot;Crete, Greece&quot;' value='&quot;Greece&quot;' />
          <semantic-value key='&quot;Cuba region&quot;' value='&quot;Cuba&quot;' />
          <semantic-value key='&quot;Cyprus region&quot;' value='&quot;Cyprus&quot;' />
          <semantic-value key='&quot;Dodecanese Islands, Greece&quot;' value='&quot;Greece&quot;' />
          <semantic-value key='&quot;Dominica region, Leeward Islands&quot;' value='&quot;Dominica&quot;' />
          <semantic-value key='&quot;Dominican Republic region&quot;' value='&quot;Dominican Republic&quot;' />
          <semantic-value key='&quot;east of Dominica, Leeward Islands&quot;' value='&quot;Dominica&quot;' />
          <semantic-value key='&quot;east of Guadeloupe, Leeward Islands&quot;' value='&quot;Guadeloupe&quot;' />
          <semantic-value key='&quot;east of the North Island of New Zealand&quot;' value='&quot;New Zealand&quot;' />
          <semantic-value key='&quot;east of the Philippine Islands&quot;' value='&quot;Philippines&quot;' />
          <semantic-value key='&quot;eastern Honshu, Japan&quot;' value='&quot;Japan&quot;' />
          <semantic-value key='&quot;eastern Iran&quot;' value='&quot;Iran&quot;' />
          <semantic-value key='&quot;eastern Kazakhstan&quot;' value='&quot;Kazakhstan&quot;' />
          <semantic-value key='&quot;eastern New Guinea region, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
          <semantic-value key='&quot;eastern Sichuan, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;eastern Turkey&quot;' value='&quot;Turkey&quot;' />
          <semantic-value key='&quot;eastern Uzbekistan&quot;' value='&quot;Uzbekistan&quot;' />
          <semantic-value key='&quot;Estado de Mexico, Mexico&quot;' value='&quot;Mexico&quot;' />
          <semantic-value key='&quot;Falkland Islands region&quot;' value='&quot;Falkland Islands (Islas Malvinas)&quot;' />
          <semantic-value key='&quot;Federated States of Micronesia region&quot;' value='&quot;Federated States of Micronesia&quot;' />
          <semantic-value key='&quot;Fiji region&quot;' value='&quot;Fiji&quot;' />
          <semantic-value key='&quot;Flores region, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Fox Islands, Aleutian Islands, Alaska&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;Galapagos Islands, Ecuador region&quot;' value='&quot;Ecuador&quot;' />
          <semantic-value key='&quot;Gansu-Ningxia border region, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Gansu-Qinghai border region, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Gansu, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Georgia (Sak&apos;art&apos;velo)&quot;' value='&quot;Georgia&quot;' />
          <semantic-value key='&quot;Golfo de Fonseca, Honduras&quot;' value='&quot;Honduras&quot;' />
          <semantic-value key='&quot;Greater Los Angeles area, California&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;Guadeloupe region, Leeward Islands&quot;' value='&quot;Guadeloupe&quot;' />
          <semantic-value key='&quot;Guam region&quot;' value='&quot;Guam&quot;' />
          <semantic-value key='&quot;Guerrero, Mexico&quot;' value='&quot;Mexico&quot;' />
          <semantic-value key='&quot;Santiago Del Estero, Argentina&quot;' value='&quot;Argentina&quot;' />
          <semantic-value key='&quot;Seattle-Tacoma urban area, Washington&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;Seram, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Shikoku, Japan&quot;' value='&quot;Japan&quot;' />
          <semantic-value key='&quot;Sibuyan Sea, Philippines&quot;' value='&quot;Philippines&quot;' />
          <semantic-value key='&quot;Sichuan-Gansu border region, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Sichuan-Yunnan border region, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Sicily, Italy&quot;' value='&quot;Italy&quot;' />
          <semantic-value key='&quot;Sikkim, India&quot;' value='&quot;India&quot;' />
          <semantic-value key='&quot;Simeulue, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Sonora-Sinaloa border region, Mexico&quot;' value='&quot;Mexico&quot;' />
          <semantic-value key='&quot;Sonora, Mexico&quot;' value='&quot;Mexico&quot;' />
          <semantic-value key='&quot;South Island of New Zealand&quot;' value='&quot;New Zealand&quot;' />
          <semantic-value key='&quot;south of Alaska&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;south of Australia&quot;' value='&quot;Australia&quot;' />
          <semantic-value key='&quot;south of Bali, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;south of Java, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;south of Lombok, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;south of Panama&quot;' value='&quot;Panama&quot;' />
          <semantic-value key='&quot;south of Sumba, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;south of Sumbawa, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;south of the Fiji Islands&quot;' value='&quot;Fiji&quot;' />
          <semantic-value key='&quot;south of Tonga&quot;' value='&quot;Tonga&quot;' />
          <semantic-value key='&quot;southeast of Shikoku, Japan&quot;' value='&quot;Japan&quot;' />
          <semantic-value key='&quot;southeast of Taiwan&quot;' value='&quot;Taiwan&quot;' />
          <semantic-value key='&quot;southeast of the Ryukyu Islands, Japan&quot;' value='&quot;Japan&quot;' />
          <semantic-value key='&quot;Southeastern Alaska&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;southeastern Iran&quot;' value='&quot;Iran&quot;' />
          <semantic-value key='&quot;Southern Alaska&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;Southern California&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;southern Greece&quot;' value='&quot;Greece&quot;' />
          <semantic-value key='&quot;southern Idaho&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;southern Iran&quot;' value='&quot;Iran&quot;' />
          <semantic-value key='&quot;southern Italy&quot;' value='&quot;Italy&quot;' />
          <semantic-value key='&quot;southern Peru&quot;' value='&quot;Peru&quot;' />
          <semantic-value key='&quot;southern Qinghai, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;southern Sumatra, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;southern Xinjiang, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;southwest of Sumatra, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;southwestern Pakistan&quot;' value='&quot;Pakistan&quot;' />
          <semantic-value key='&quot;southwestern Ryukyu Islands, Japan&quot;' value='&quot;Japan&quot;' />
          <semantic-value key='&quot;southwestern Sakha, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;southwestern Siberia, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;State of Yap, Federated States of Micronesia&quot;' value='&quot;Federated States of Micronesia&quot;' />
          <semantic-value key='&quot;Sucre, Venezuela&quot;' value='&quot;Venezuela&quot;' />
          <semantic-value key='&quot;Sulawesi, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Sulu Archipelago, Philippines&quot;' value='&quot;Philippines&quot;' />
          <semantic-value key='&quot;Sumba region, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Sumbawa region, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Sunda Strait, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Tachira, Venezuela&quot;' value='&quot;Venezuela&quot;' />
          <semantic-value key='&quot;Taiwan region&quot;' value='&quot;Taiwan&quot;' />
          <semantic-value key='&quot;Tarapaca, Chile&quot;' value='&quot;Chile&quot;' />
          <semantic-value key='&quot;Tarija, Bolivia&quot;' value='&quot;Bolivia&quot;' />
          <semantic-value key='&quot;Tatar Strait, Russia&quot;' value='&quot;Russia&quot;' />
          <semantic-value key='&quot;Tianjin-Hebei border region, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Tierra del Fuego, Argentina region&quot;' value='&quot;Argentina&quot;' />
          <semantic-value key='&quot;Tierra del Fuego, Magallanes, Chile&quot;' value='&quot;Chile&quot;' />
          <semantic-value key='&quot;Timor region, Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Tobago region, Trinidad and Tobago&quot;' value='&quot;Trinidad and Tobago&quot;' />
          <semantic-value key='&quot;Tonga region&quot;' value='&quot;Tonga&quot;' />
          <semantic-value key='&quot;Trinidad region, Trinidad and Tobago&quot;' value='&quot;Trinidad and Tobago&quot;' />
          <semantic-value key='&quot;Tuamotu Archipelago, French Polynesia region&quot;' value='&quot;French Polynesia&quot;' />
          <semantic-value key='&quot;Unimak Island region, Alaska&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;Uttaranchal, India&quot;' value='&quot;India&quot;' />
          <semantic-value key='&quot;Valparaiso, Chile&quot;' value='&quot;Chile&quot;' />
          <semantic-value key='&quot;Vancouver Island, Canada region&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;Veracruz, Mexico&quot;' value='&quot;Mexico&quot;' />
          <semantic-value key='&quot;Virgin Islands region&quot;' value='&quot;Virgin Islands&quot;' />
          <semantic-value key='&quot;Visayan Sea, Philippines&quot;' value='&quot;Philippines&quot;' />
          <semantic-value key='&quot;Volcano Islands, Japan region&quot;' value='&quot;Japan&quot;' />
          <semantic-value key='&quot;west of the Bonin Islands, Japan&quot;' value='&quot;Japan&quot;' />
          <semantic-value key='&quot;western Afghanistan&quot;' value='&quot;Afghanistan&quot;' />
          <semantic-value key='&quot;Western Australia&quot;' value='&quot;Australia&quot;' />
          <semantic-value key='&quot;western Honshu, Japan&quot;' value='&quot;Japan&quot;' />
          <semantic-value key='&quot;western Iran&quot;' value='&quot;Iran&quot;' />
          <semantic-value key='&quot;western Kazakhstan&quot;' value='&quot;Kazakhstan&quot;' />
          <semantic-value key='&quot;western Mongolia&quot;' value='&quot;Mongolia&quot;' />
          <semantic-value key='&quot;western Montana&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;western Nei Mongol, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;western Sichuan, China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;western Turkey&quot;' value='&quot;Turkey&quot;' />
          <semantic-value key='&quot;western Uzbekistan&quot;' value='&quot;Uzbekistan&quot;' />
          <semantic-value key='&quot;Yellowstone National Park, Wyoming&quot;' value='&quot;United States&quot;' />
          <semantic-value key='&quot;Yunnan, China&quot;' value='&quot;China&quot;' />
        </semantic-values>
      </column>
      <column caption='Rms' datatype='real' name='[rms]' role='measure' type='quantitative' />
      <column caption='Time1' datatype='string' name='[time]' role='dimension' type='nominal' />
      <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
      <column caption='Updated' datatype='string' name='[updated]' role='dimension' type='nominal' />
      <column-instance column='[__tableau_internal_object_id__].[query_46801CFFF05A4B69A681B9992F07E972]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:query_46801CFFF05A4B69A681B9992F07E972:ok]' pivot='key' type='ordinal' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[__tableau_internal_object_id__].[cnt:query_46801CFFF05A4B69A681B9992F07E972:ok]' palette='red_10_0' type='palette'>
            <map to='#ae123a'>
              <bucket>4385</bucket>
            </map>
            <map to='#b3143a'>
              <bucket>632</bucket>
            </map>
            <map to='#b9163a'>
              <bucket>545</bucket>
            </map>
            <map to='#bf193a'>
              <bucket>494</bucket>
            </map>
            <map to='#c41c3b'>
              <bucket>307</bucket>
            </map>
            <map to='#c9213c'>
              <bucket>234</bucket>
            </map>
            <map to='#ce253c'>
              <bucket>228</bucket>
            </map>
            <map to='#d3293d'>
              <bucket>210</bucket>
            </map>
            <map to='#d72e3e'>
              <bucket>200</bucket>
            </map>
            <map to='#dc333f'>
              <bucket>159</bucket>
            </map>
            <map to='#e03841'>
              <bucket>117</bucket>
            </map>
            <map to='#e33e43'>
              <bucket>99</bucket>
            </map>
            <map to='#e74445'>
              <bucket>86</bucket>
            </map>
            <map to='#ea4a47'>
              <bucket>83</bucket>
            </map>
            <map to='#ec5149'>
              <bucket>55</bucket>
            </map>
            <map to='#ee584c'>
              <bucket>52</bucket>
            </map>
            <map to='#f05e4e'>
              <bucket>41</bucket>
            </map>
            <map to='#f26452'>
              <bucket>36</bucket>
            </map>
            <map to='#f36a57'>
              <bucket>28</bucket>
            </map>
            <map to='#f5705c'>
              <bucket>24</bucket>
            </map>
            <map to='#f67661'>
              <bucket>20</bucket>
            </map>
            <map to='#f77c66'>
              <bucket>18</bucket>
            </map>
            <map to='#f8826b'>
              <bucket>16</bucket>
            </map>
            <map to='#f98870'>
              <bucket>14</bucket>
            </map>
            <map to='#fa8d77'>
              <bucket>12</bucket>
            </map>
            <map to='#fb937d'>
              <bucket>9</bucket>
            </map>
            <map to='#fb9884'>
              <bucket>8</bucket>
            </map>
            <map to='#fc9e8b'>
              <bucket>7</bucket>
            </map>
            <map to='#fca391'>
              <bucket>6</bucket>
            </map>
            <map to='#fda898'>
              <bucket>5</bucket>
            </map>
            <map to='#fead9e'>
              <bucket>4</bucket>
            </map>
            <map to='#feb3a5'>
              <bucket>3</bucket>
            </map>
            <map to='#feb8ab'>
              <bucket>2</bucket>
            </map>
            <map to='#ffbeb2'>
              <bucket>1</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <field-sort-info field-sort-order-type='custom-order'>
        <field-sort-custom-order field='time' />
        <field-sort-custom-order field='Date' />
        <field-sort-custom-order field='Calculation_750412355195031553' />
        <field-sort-custom-order field='Time' />
        <field-sort-custom-order field='F4' />
        <field-sort-custom-order field='latitude' />
        <field-sort-custom-order field='longitude' />
        <field-sort-custom-order field='depth' />
        <field-sort-custom-order field='mag' />
        <field-sort-custom-order field='magType' />
        <field-sort-custom-order field='nst' />
        <field-sort-custom-order field='gap' />
        <field-sort-custom-order field='dmin' />
        <field-sort-custom-order field='rms' />
        <field-sort-custom-order field='net' />
        <field-sort-custom-order field='id' />
        <field-sort-custom-order field='updated' />
        <field-sort-custom-order field='place' />
        <field-sort-custom-order field='type' />
        <field-sort-custom-order field='Date (group)' />
      </field-sort-info>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='query' id='query_46801CFFF05A4B69A681B9992F07E972'>
            <properties context=''>
              <relation connection='excel-direct.08cnw831db5lzx17i13pg04vdbn7' name='query' table='[query$]' type='table'>
                <columns gridOrigin='A1:R8319:no:A1:R8319:1' header='yes' lost='0' outcome='1' processed='60431'>
                  <column datatype='string' name='time' ordinal='0' />
                  <column datatype='date' name='Date' ordinal='1' />
                  <column datatype='datetime' name='Time' ordinal='2' />
                  <column datatype='real' name='F4' ordinal='3' />
                  <column datatype='real' name='latitude' ordinal='4' />
                  <column datatype='real' name='longitude' ordinal='5' />
                  <column datatype='real' name='depth' ordinal='6' />
                  <column datatype='real' name='mag' ordinal='7' />
                  <column datatype='string' name='magType' ordinal='8' />
                  <column datatype='integer' name='nst' ordinal='9' />
                  <column datatype='real' name='gap' ordinal='10' />
                  <column datatype='real' name='dmin' ordinal='11' />
                  <column datatype='real' name='rms' ordinal='12' />
                  <column datatype='string' name='net' ordinal='13' />
                  <column datatype='string' name='id' ordinal='14' />
                  <column datatype='string' name='updated' ordinal='15' />
                  <column datatype='string' name='place' ordinal='16' />
                  <column datatype='string' name='type' ordinal='17' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Q1V1'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;Question 1 Vis 1&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='query (Mag6PlusEarthquakes_1900-2013)' name='federated.1w3s5me1qqv7sx13qvl1d1xochkj' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1w3s5me1qqv7sx13qvl1d1xochkj'>
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
            <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[none:longitude:qk]' included-values='non-null' />
          <slices>
            <column>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[none:longitude:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[none:longitude:qk]' field-type='quantitative' max='32410063.179162949' min='-30263026.459123462' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[none:latitude:qk]' field-type='quantitative' max='19953258.177974321' min='-12102484.425986767' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[none:latitude:qk]</rows>
        <cols>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[none:longitude:qk]</cols>
      </table>
      <simple-id uuid='{A20AEE88-0BF4-4439-9564-BED881B2C4B2}' />
    </worksheet>
    <worksheet name='Q1V2'>
      <table>
        <view>
          <datasources>
            <datasource caption='query (Mag6PlusEarthquakes_1900-2013)' name='federated.1w3s5me1qqv7sx13qvl1d1xochkj' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1w3s5me1qqv7sx13qvl1d1xochkj'>
            <column-instance column='[place]' derivation='None' name='[none:place:nk]' pivot='key' type='nominal' />
            <column caption='Place' datatype='string' name='[place]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;101km SW of Atka, Alaska&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;101km WSW of Mutis, Colombia&quot;' value='&quot;Colombia&quot;' />
                <semantic-value key='&quot;108km E of Miyako, Japan&quot;' value='&quot;Japan&quot;' />
                <semantic-value key='&quot;110km NW of Nago, Japan&quot;' value='&quot;Japan&quot;' />
                <semantic-value key='&quot;111km NNE of Tobelo, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;111km NNW of Nggilat, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;114km WSW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;115km ENE of Taron, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
                <semantic-value key='&quot;115km WNW of Raoul Island, New Zealand&quot;' value='&quot;New Zealand&quot;' />
                <semantic-value key='&quot;116km NW of L&apos;Esperance Rock, New Zealand&quot;' value='&quot;New Zealand&quot;' />
                <semantic-value key='&quot;117km W of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;118km SSW of Atka, Alaska&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;118km WNW of Raoul Island, New Zealand&quot;' value='&quot;New Zealand&quot;' />
                <semantic-value key='&quot;122km WNW of Panguna, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
                <semantic-value key='&quot;133km NW of Hihifo, Tonga&quot;' value='&quot;Tonga&quot;' />
                <semantic-value key='&quot;134km SE of Kuril&apos;sk, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;135km SE of Severo-Kuril&apos;sk, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;135km WSW of Druzhina, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;138km NNW of Amukta Island, Alaska&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;140km WNW of Neiafu, Tonga&quot;' value='&quot;Tonga&quot;' />
                <semantic-value key='&quot;142km SW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;144km W of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;152km ESE of Neiafu, Tonga&quot;' value='&quot;Tonga&quot;' />
                <semantic-value key='&quot;157km SW of Sungaipenuh, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;15km NNE of Kunisaki-shi, Japan&quot;' value='&quot;Japan&quot;' />
                <semantic-value key='&quot;167km NW of Ceva-i-Ra, Fiji&quot;' value='&quot;Fiji&quot;' />
                <semantic-value key='&quot;16km SE of Caburan, Philippines&quot;' value='&quot;Philippines&quot;' />
                <semantic-value key='&quot;170km NNE of Bathsheba, Barbados&quot;' value='&quot;Barbados&quot;' />
                <semantic-value key='&quot;172km S of Ust&apos;-Kamchatsk Staryy, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;180km SE of Lorengau, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
                <semantic-value key='&quot;182km SW of Bella Bella, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;187km WSW of Bella Bella, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;189km SSE of L&apos;Esperance Rock, New Zealand&quot;' value='&quot;New Zealand&quot;' />
                <semantic-value key='&quot;189km WNW of Saumlaki, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;18km N of Shandon, California&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;18km W of Chivay, Peru&quot;' value='&quot;Peru&quot;' />
                <semantic-value key='&quot;18km WNW of San Marcos, Mexico&quot;' value='&quot;Mexico&quot;' />
                <semantic-value key='&quot;19km SSW of Obihiro, Japan&quot;' value='&quot;Japan&quot;' />
                <semantic-value key='&quot;1km E of Lixourion, Greece&quot;' value='&quot;Greece&quot;' />
                <semantic-value key='&quot;20km NNW of La Union, Mexico&quot;' value='&quot;Mexico&quot;' />
                <semantic-value key='&quot;21km SSE of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;239km NNE of Ceva-i-Ra, Fiji&quot;' value='&quot;Fiji&quot;' />
                <semantic-value key='&quot;23km ESE of Aitape, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
                <semantic-value key='&quot;23km ESE of Suncho Corral, Argentina&quot;' value='&quot;Argentina&quot;' />
                <semantic-value key='&quot;240km E of Enarotali, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;247km E of Kuril&apos;sk, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;251km ENE of Kuril&apos;sk, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;25km S of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;25km S of Paracas, Peru&quot;' value='&quot;Peru&quot;' />
                <semantic-value key='&quot;25km SE of Buli, Taiwan&quot;' value='&quot;Taiwan&quot;' />
                <semantic-value key='&quot;272km ESE of Hotan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;27km NNW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;282km SW of Vaini, Tonga&quot;' value='&quot;Tonga&quot;' />
                <semantic-value key='&quot;283km SW of Vaini, Tonga&quot;' value='&quot;Tonga&quot;' />
                <semantic-value key='&quot;292km NW of Raoul Island, New Zealand&quot;' value='&quot;New Zealand&quot;' />
                <semantic-value key='&quot;29km NE of Kandrian, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
                <semantic-value key='&quot;29km SE of Blenheim, New Zealand&quot;' value='&quot;New Zealand&quot;' />
                <semantic-value key='&quot;2km N of Yacuanquer, Colombia&quot;' value='&quot;Colombia&quot;' />
                <semantic-value key='&quot;31km N of Rabaul, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
                <semantic-value key='&quot;31km SE of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;31km W of Platanos, Greece&quot;' value='&quot;Greece&quot;' />
                <semantic-value key='&quot;32km E of Finschhafen, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
                <semantic-value key='&quot;33km SW of Jiquilillo, Nicaragua&quot;' value='&quot;Nicaragua&quot;' />
                <semantic-value key='&quot;35km NNE of Masterton, New Zealand&quot;' value='&quot;New Zealand&quot;' />
                <semantic-value key='&quot;36km N of Gueiria, Venezuela&quot;' value='&quot;Venezuela&quot;' />
                <semantic-value key='&quot;36km SSW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;38km SSE of Adipala, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;40km W of Agrihan, Northern Mariana Islands&quot;' value='&quot;Northern Mariana Islands&quot;' />
                <semantic-value key='&quot;41km SSW of Coquimbo, Chile&quot;' value='&quot;Chile&quot;' />
                <semantic-value key='&quot;46km ESE of Blenheim, New Zealand&quot;' value='&quot;New Zealand&quot;' />
                <semantic-value key='&quot;46km SSE of Acari, Peru&quot;' value='&quot;Peru&quot;' />
                <semantic-value key='&quot;46km SSW of Hualian, Taiwan&quot;' value='&quot;Taiwan&quot;' />
                <semantic-value key='&quot;46km W of Masachapa, Nicaragua&quot;' value='&quot;Nicaragua&quot;' />
                <semantic-value key='&quot;47km SSW of Sigli, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;48km WSW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;4km SE of Sagbayan, Philippines&quot;' value='&quot;Philippines&quot;' />
                <semantic-value key='&quot;50km NE of Namie, Japan&quot;' value='&quot;Japan&quot;' />
                <semantic-value key='&quot;53km SW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;53km WSW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;55km S of Bireun, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;56km NNE of Vallenar, Chile&quot;' value='&quot;Chile&quot;' />
                <semantic-value key='&quot;56km WSW of Linqiong, China&quot;' value='&quot;Chile&quot;' />
                <semantic-value key='&quot;58km WSW of Agrihan, Northern Mariana Islands&quot;' value='&quot;Northern Mariana Islands&quot;' />
                <semantic-value key='&quot;59km E of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;59km S of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;60km E of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;60km SE of Kegen, Kazakhstan&quot;' value='&quot;Kazakhstan&quot;' />
                <semantic-value key='&quot;60km WNW of Iquique, Chile&quot;' value='&quot;Chile&quot;' />
                <semantic-value key='&quot;61km N of Hatillo, Puerto Rico&quot;' value='&quot;Puerto Rico&quot;' />
                <semantic-value key='&quot;61km NNE of Awaran, Pakistan&quot;' value='&quot;Pakistan&quot;' />
                <semantic-value key='&quot;61km S of Pirgos, Greece&quot;' value='&quot;Greece&quot;' />
                <semantic-value key='&quot;62km WSW of Panguna, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
                <semantic-value key='&quot;66km SW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;66km WSW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;67km WSW of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;69km SE of Sinabang, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;6km ENE of Santa Catarina Pinula, Guatemala&quot;' value='&quot;Guatemala&quot;' />
                <semantic-value key='&quot;6km W of Sechura, Peru&quot;' value='&quot;Peru&quot;' />
                <semantic-value key='&quot;76km W of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;77km SSW of Atka, Alaska&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;77km W of Panguna, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
                <semantic-value key='&quot;77km WNW of Ferndale, California&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;78km NE of L&apos;Esperance Rock, New Zealand&quot;' value='&quot;New Zealand&quot;' />
                <semantic-value key='&quot;7km NNW of Lixourion, Greece&quot;' value='&quot;Greece&quot;' />
                <semantic-value key='&quot;7km SSE of Ciudad Tecun Uman, Guatemala&quot;' value='&quot;Guatemala&quot;' />
                <semantic-value key='&quot;80km WNW of Iquique, Chile&quot;' value='&quot;Chile&quot;' />
                <semantic-value key='&quot;81km S of Pirgos, Greece&quot;' value='&quot;Greece&quot;' />
                <semantic-value key='&quot;81km SSE of Panguna, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
                <semantic-value key='&quot;81km SSW of Atka, Alaska&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;82km NNE of Hihifo, Tonga&quot;' value='&quot;Tonga&quot;' />
                <semantic-value key='&quot;82km SSW of Atka, Alaska&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;83km E of Khash, Iran&quot;' value='&quot;Iran&quot;' />
                <semantic-value key='&quot;84km SE of Ozernovskiy, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;85km NNE of Awaran, Pakistan&quot;' value='&quot;Pakistan&quot;' />
                <semantic-value key='&quot;86km NW of Nuku`alofa, Tonga&quot;' value='&quot;Tonga&quot;' />
                <semantic-value key='&quot;88km W of Constitucion, Chile&quot;' value='&quot;Chile&quot;' />
                <semantic-value key='&quot;89km SE of Bandar Bushehr, Iran&quot;' value='&quot;Iran&quot;' />
                <semantic-value key='&quot;89km SE of Ozernovskiy, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;91km SSE of Lata, Solomon Islands&quot;' value='&quot;Solomon Islands&quot;' />
                <semantic-value key='&quot;93km SE of Ozernovskiy, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;94km NNE of L&apos;Esperance Rock, New Zealand&quot;' value='&quot;New Zealand&quot;' />
                <semantic-value key='&quot;94km SE of Minab, Iran&quot;' value='&quot;Iran&quot;' />
                <semantic-value key='&quot;96km WSW of Paita, Peru&quot;' value='&quot;Peru&quot;' />
                <semantic-value key='&quot;97km SE of Severo-Kuril&apos;sk, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;98km W of Panguna, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
                <semantic-value key='&quot;99km SW of Etchoropo, Mexico&quot;' value='&quot;Mexico&quot;' />
                <semantic-value key='&quot;9km N of Zarubino, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;Acre, Brazil&quot;' value='&quot;Brazil&quot;' />
                <semantic-value key='&quot;Admiralty Islands region, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
                <semantic-value key='&quot;Aisen, Chile&quot;' value='&quot;Chile&quot;' />
                <semantic-value key='&quot;Alamagan region, Northern Mariana Islands&quot;' value='&quot;Northern Mariana Islands&quot;' />
                <semantic-value key='&quot;Alaska Peninsula&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;Amazonas, Brazil&quot;' value='&quot;Brazil&quot;' />
                <semantic-value key='&quot;Amurskaya Oblast&apos;, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;Anatahan region, Northern Mariana Islands&quot;' value='&quot;Northern Mariana Islands&quot;' />
                <semantic-value key='&quot;Andaman Islands, India region&quot;' value='&quot;India&quot;' />
                <semantic-value key='&quot;Andreanof Islands, Aleutian Islands, Alaska&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;Antofagasta, Chile&quot;' value='&quot;Chile&quot;' />
                <semantic-value key='&quot;Anzoategui, Venezuela&quot;' value='&quot;Venezuela&quot;' />
                <semantic-value key='&quot;Apure, Venezuela&quot;' value='&quot;Venezuela&quot;' />
                <semantic-value key='&quot;Araucania, Chile&quot;' value='&quot;Chile&quot;' />
                <semantic-value key='&quot;Assam, India&quot;' value='&quot;India&quot;' />
                <semantic-value key='&quot;Atacama, Chile&quot;' value='&quot;Chile&quot;' />
                <semantic-value key='&quot;Auckland Islands, New Zealand region&quot;' value='&quot;New Zealand&quot;' />
                <semantic-value key='&quot;Azores Islands, Portugal&quot;' value='&quot;Poland&quot;' />
                <semantic-value key='&quot;Babuyan Islands region, Philippines&quot;' value='&quot;Philippines&quot;' />
                <semantic-value key='&quot;Baffin Island region, Nunavut, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Baja California Sur, Mexico&quot;' value='&quot;Mexico&quot;' />
                <semantic-value key='&quot;Baja California, Mexico&quot;' value='&quot;Mexico&quot;' />
                <semantic-value key='&quot;Bali region, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;Batan Islands region, Philippines&quot;' value='&quot;Philippines&quot;' />
                <semantic-value key='&quot;Beni, Bolivia&quot;' value='&quot;Bolivia&quot;' />
                <semantic-value key='&quot;Biak region, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;Bio-Bio, Chile&quot;' value='&quot;Chile&quot;' />
                <semantic-value key='&quot;Bo Hai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Bohol, Philippines&quot;' value='&quot;Philippines&quot;' />
                <semantic-value key='&quot;Bonin Islands, Japan region&quot;' value='&quot;Japan&quot;' />
                <semantic-value key='&quot;Bougainville region, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
                <semantic-value key='&quot;British Columbia, Canada&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Buru, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;Caspian Sea, offshore Azerbaijan&quot;' value='&quot;Azerbaijan&quot;' />
                <semantic-value key='&quot;Caspian Sea, offshore Turkmenistan&quot;' value='&quot;Turkmenistan&quot;' />
                <semantic-value key='&quot;Catamarca, Argentina&quot;' value='&quot;Argentina&quot;' />
                <semantic-value key='&quot;Catanduanes, Philippines&quot;' value='&quot;Philippines&quot;' />
                <semantic-value key='&quot;Caucasus region, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;Cayman Islands region&quot;' value='&quot;Cayman Islands&quot;' />
                <semantic-value key='&quot;central Afghanistan&quot;' value='&quot;Afghanistan&quot;' />
                <semantic-value key='&quot;Central Alaska&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;Central California&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;central Iran&quot;' value='&quot;Iran&quot;' />
                <semantic-value key='&quot;central Italy&quot;' value='&quot;Italy&quot;' />
                <semantic-value key='&quot;central Mongolia&quot;' value='&quot;Mongolia&quot;' />
                <semantic-value key='&quot;central Peru&quot;' value='&quot;Peru&quot;' />
                <semantic-value key='&quot;central Turkey&quot;' value='&quot;Turkey&quot;' />
                <semantic-value key='&quot;Ceram Sea, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;Chatham Islands, New Zealand region&quot;' value='&quot;New Zealand&quot;' />
                <semantic-value key='&quot;Chiapas, Mexico&quot;' value='&quot;Mexico&quot;' />
                <semantic-value key='&quot;Chitinskaya Oblast&apos;, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;Chukotskiy Avtonomnyy Okrug, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;Chuquisaca, Bolivia&quot;' value='&quot;Bolivia&quot;' />
                <semantic-value key='&quot;Cochabamba, Bolivia&quot;' value='&quot;Bolivia&quot;' />
                <semantic-value key='&quot;Colima, Mexico&quot;' value='&quot;Mexico&quot;' />
                <semantic-value key='&quot;Cook Strait, New Zealand&quot;' value='&quot;New Zealand&quot;' />
                <semantic-value key='&quot;Coquimbo, Chile&quot;' value='&quot;Chile&quot;' />
                <semantic-value key='&quot;Cordoba, Argentina&quot;' value='&quot;Argentina&quot;' />
                <semantic-value key='&quot;Crete, Greece&quot;' value='&quot;Greece&quot;' />
                <semantic-value key='&quot;Cuba region&quot;' value='&quot;Cuba&quot;' />
                <semantic-value key='&quot;Cyprus region&quot;' value='&quot;Cyprus&quot;' />
                <semantic-value key='&quot;Dodecanese Islands, Greece&quot;' value='&quot;Greece&quot;' />
                <semantic-value key='&quot;Dominica region, Leeward Islands&quot;' value='&quot;Dominica&quot;' />
                <semantic-value key='&quot;Dominican Republic region&quot;' value='&quot;Dominican Republic&quot;' />
                <semantic-value key='&quot;east of Dominica, Leeward Islands&quot;' value='&quot;Dominica&quot;' />
                <semantic-value key='&quot;east of Guadeloupe, Leeward Islands&quot;' value='&quot;Guadeloupe&quot;' />
                <semantic-value key='&quot;east of the North Island of New Zealand&quot;' value='&quot;New Zealand&quot;' />
                <semantic-value key='&quot;east of the Philippine Islands&quot;' value='&quot;Philippines&quot;' />
                <semantic-value key='&quot;eastern Honshu, Japan&quot;' value='&quot;Japan&quot;' />
                <semantic-value key='&quot;eastern Iran&quot;' value='&quot;Iran&quot;' />
                <semantic-value key='&quot;eastern Kazakhstan&quot;' value='&quot;Kazakhstan&quot;' />
                <semantic-value key='&quot;eastern New Guinea region, Papua New Guinea&quot;' value='&quot;Papua New Guinea&quot;' />
                <semantic-value key='&quot;eastern Sichuan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;eastern Turkey&quot;' value='&quot;Turkey&quot;' />
                <semantic-value key='&quot;eastern Uzbekistan&quot;' value='&quot;Uzbekistan&quot;' />
                <semantic-value key='&quot;Estado de Mexico, Mexico&quot;' value='&quot;Mexico&quot;' />
                <semantic-value key='&quot;Falkland Islands region&quot;' value='&quot;Falkland Islands (Islas Malvinas)&quot;' />
                <semantic-value key='&quot;Federated States of Micronesia region&quot;' value='&quot;Federated States of Micronesia&quot;' />
                <semantic-value key='&quot;Fiji region&quot;' value='&quot;Fiji&quot;' />
                <semantic-value key='&quot;Flores region, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;Fox Islands, Aleutian Islands, Alaska&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;Galapagos Islands, Ecuador region&quot;' value='&quot;Ecuador&quot;' />
                <semantic-value key='&quot;Gansu-Ningxia border region, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Gansu-Qinghai border region, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Gansu, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Georgia (Sak&apos;art&apos;velo)&quot;' value='&quot;Georgia&quot;' />
                <semantic-value key='&quot;Golfo de Fonseca, Honduras&quot;' value='&quot;Honduras&quot;' />
                <semantic-value key='&quot;Greater Los Angeles area, California&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;Guadeloupe region, Leeward Islands&quot;' value='&quot;Guadeloupe&quot;' />
                <semantic-value key='&quot;Guam region&quot;' value='&quot;Guam&quot;' />
                <semantic-value key='&quot;Guerrero, Mexico&quot;' value='&quot;Mexico&quot;' />
                <semantic-value key='&quot;Santiago Del Estero, Argentina&quot;' value='&quot;Argentina&quot;' />
                <semantic-value key='&quot;Seattle-Tacoma urban area, Washington&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;Seram, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;Shikoku, Japan&quot;' value='&quot;Japan&quot;' />
                <semantic-value key='&quot;Sibuyan Sea, Philippines&quot;' value='&quot;Philippines&quot;' />
                <semantic-value key='&quot;Sichuan-Gansu border region, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sichuan-Yunnan border region, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Sicily, Italy&quot;' value='&quot;Italy&quot;' />
                <semantic-value key='&quot;Sikkim, India&quot;' value='&quot;India&quot;' />
                <semantic-value key='&quot;Simeulue, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;Sonora-Sinaloa border region, Mexico&quot;' value='&quot;Mexico&quot;' />
                <semantic-value key='&quot;Sonora, Mexico&quot;' value='&quot;Mexico&quot;' />
                <semantic-value key='&quot;South Island of New Zealand&quot;' value='&quot;New Zealand&quot;' />
                <semantic-value key='&quot;south of Alaska&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;south of Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;south of Bali, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;south of Java, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;south of Lombok, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;south of Panama&quot;' value='&quot;Panama&quot;' />
                <semantic-value key='&quot;south of Sumba, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;south of Sumbawa, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;south of the Fiji Islands&quot;' value='&quot;Fiji&quot;' />
                <semantic-value key='&quot;south of Tonga&quot;' value='&quot;Tonga&quot;' />
                <semantic-value key='&quot;southeast of Shikoku, Japan&quot;' value='&quot;Japan&quot;' />
                <semantic-value key='&quot;southeast of Taiwan&quot;' value='&quot;Taiwan&quot;' />
                <semantic-value key='&quot;southeast of the Ryukyu Islands, Japan&quot;' value='&quot;Japan&quot;' />
                <semantic-value key='&quot;Southeastern Alaska&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;southeastern Iran&quot;' value='&quot;Iran&quot;' />
                <semantic-value key='&quot;Southern Alaska&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;Southern California&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;southern Greece&quot;' value='&quot;Greece&quot;' />
                <semantic-value key='&quot;southern Idaho&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;southern Iran&quot;' value='&quot;Iran&quot;' />
                <semantic-value key='&quot;southern Italy&quot;' value='&quot;Italy&quot;' />
                <semantic-value key='&quot;southern Peru&quot;' value='&quot;Peru&quot;' />
                <semantic-value key='&quot;southern Qinghai, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;southern Sumatra, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;southern Xinjiang, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;southwest of Sumatra, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;southwestern Pakistan&quot;' value='&quot;Pakistan&quot;' />
                <semantic-value key='&quot;southwestern Ryukyu Islands, Japan&quot;' value='&quot;Japan&quot;' />
                <semantic-value key='&quot;southwestern Sakha, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;southwestern Siberia, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;State of Yap, Federated States of Micronesia&quot;' value='&quot;Federated States of Micronesia&quot;' />
                <semantic-value key='&quot;Sucre, Venezuela&quot;' value='&quot;Venezuela&quot;' />
                <semantic-value key='&quot;Sulawesi, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;Sulu Archipelago, Philippines&quot;' value='&quot;Philippines&quot;' />
                <semantic-value key='&quot;Sumba region, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;Sumbawa region, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;Sunda Strait, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;Tachira, Venezuela&quot;' value='&quot;Venezuela&quot;' />
                <semantic-value key='&quot;Taiwan region&quot;' value='&quot;Taiwan&quot;' />
                <semantic-value key='&quot;Tarapaca, Chile&quot;' value='&quot;Chile&quot;' />
                <semantic-value key='&quot;Tarija, Bolivia&quot;' value='&quot;Bolivia&quot;' />
                <semantic-value key='&quot;Tatar Strait, Russia&quot;' value='&quot;Russia&quot;' />
                <semantic-value key='&quot;Tianjin-Hebei border region, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Tierra del Fuego, Argentina region&quot;' value='&quot;Argentina&quot;' />
                <semantic-value key='&quot;Tierra del Fuego, Magallanes, Chile&quot;' value='&quot;Chile&quot;' />
                <semantic-value key='&quot;Timor region, Indonesia&quot;' value='&quot;Indonesia&quot;' />
                <semantic-value key='&quot;Tobago region, Trinidad and Tobago&quot;' value='&quot;Trinidad and Tobago&quot;' />
                <semantic-value key='&quot;Tonga region&quot;' value='&quot;Tonga&quot;' />
                <semantic-value key='&quot;Trinidad region, Trinidad and Tobago&quot;' value='&quot;Trinidad and Tobago&quot;' />
                <semantic-value key='&quot;Tuamotu Archipelago, French Polynesia region&quot;' value='&quot;French Polynesia&quot;' />
                <semantic-value key='&quot;Unimak Island region, Alaska&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;Uttaranchal, India&quot;' value='&quot;India&quot;' />
                <semantic-value key='&quot;Valparaiso, Chile&quot;' value='&quot;Chile&quot;' />
                <semantic-value key='&quot;Vancouver Island, Canada region&quot;' value='&quot;Canada&quot;' />
                <semantic-value key='&quot;Veracruz, Mexico&quot;' value='&quot;Mexico&quot;' />
                <semantic-value key='&quot;Virgin Islands region&quot;' value='&quot;Virgin Islands&quot;' />
                <semantic-value key='&quot;Visayan Sea, Philippines&quot;' value='&quot;Philippines&quot;' />
                <semantic-value key='&quot;Volcano Islands, Japan region&quot;' value='&quot;Japan&quot;' />
                <semantic-value key='&quot;west of the Bonin Islands, Japan&quot;' value='&quot;Japan&quot;' />
                <semantic-value key='&quot;western Afghanistan&quot;' value='&quot;Afghanistan&quot;' />
                <semantic-value key='&quot;Western Australia&quot;' value='&quot;Australia&quot;' />
                <semantic-value key='&quot;western Honshu, Japan&quot;' value='&quot;Japan&quot;' />
                <semantic-value key='&quot;western Iran&quot;' value='&quot;Iran&quot;' />
                <semantic-value key='&quot;western Kazakhstan&quot;' value='&quot;Kazakhstan&quot;' />
                <semantic-value key='&quot;western Mongolia&quot;' value='&quot;Mongolia&quot;' />
                <semantic-value key='&quot;western Montana&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;western Nei Mongol, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;western Sichuan, China&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;western Turkey&quot;' value='&quot;Turkey&quot;' />
                <semantic-value key='&quot;western Uzbekistan&quot;' value='&quot;Uzbekistan&quot;' />
                <semantic-value key='&quot;Yellowstone National Park, Wyoming&quot;' value='&quot;United States&quot;' />
                <semantic-value key='&quot;Yunnan, China&quot;' value='&quot;China&quot;' />
              </semantic-values>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[Longitude (generated)]' field-type='quantitative' max='32015377.819789227' min='-14127802.741140557' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[Latitude (generated)]' field-type='quantitative' max='10000033.161756478' min='-13601067.845487703' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <lod column='[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[none:place:nk]' />
              <geometry column='[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[Latitude (generated)]</rows>
        <cols>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{0BBD1FBF-8E75-4EBD-925D-2723E2704F7D}' />
    </worksheet>
    <worksheet name='Q2V1'>
      <table>
        <view>
          <datasources>
            <datasource caption='query (Mag6PlusEarthquakes_1900-2013)' name='federated.1w3s5me1qqv7sx13qvl1d1xochkj' />
          </datasources>
          <datasource-dependencies datasource='federated.1w3s5me1qqv7sx13qvl1d1xochkj'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[mag]' derivation='Avg' name='[avg:mag:qk]' pivot='key' type='quantitative' />
            <column caption='Mag' datatype='real' name='[mag]' role='measure' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[avg:mag:qk]' field-type='quantitative' max='8.0' min='6.0' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[avg:mag:qk]</rows>
        <cols>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[yr:Date:ok]</cols>
      </table>
      <simple-id uuid='{96D4CC06-34FA-4776-AB89-36B12C3EC191}' />
    </worksheet>
    <worksheet name='Q2V2'>
      <table>
        <view>
          <datasources>
            <datasource caption='query (Mag6PlusEarthquakes_1900-2013)' name='federated.1w3s5me1qqv7sx13qvl1d1xochkj' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1w3s5me1qqv7sx13qvl1d1xochkj'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[mag]' derivation='Avg' name='[avg:mag:qk]' pivot='key' type='quantitative' />
            <column caption='Mag' datatype='real' name='[mag]' role='measure' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[avg:mag:qk]</rows>
        <cols>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[yr:Date:ok]</cols>
      </table>
      <simple-id uuid='{19359C53-8527-4E21-834B-35A3CB1DF8FC}' />
    </worksheet>
    <worksheet name='Q3V1'>
      <table>
        <view>
          <datasources>
            <datasource caption='query (Mag6PlusEarthquakes_1900-2013)' name='federated.1w3s5me1qqv7sx13qvl1d1xochkj' />
          </datasources>
          <datasource-dependencies datasource='federated.1w3s5me1qqv7sx13qvl1d1xochkj'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[mag]' derivation='Count' name='[cnt:mag:qk]' pivot='key' type='quantitative' />
            <column caption='Mag' datatype='real' name='[mag]' role='measure' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[cnt:mag:qk]</rows>
        <cols>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[yr:Date:ok]</cols>
      </table>
      <simple-id uuid='{5B210AB7-6980-4BE5-9F17-294A34DA8973}' />
    </worksheet>
    <worksheet name='Q3V2'>
      <table>
        <view>
          <datasources />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{4487C35C-64A9-4513-9AB6-818206E36F97}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='Q1V1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{DF30CD98-9CCA-4854-9AAB-A38153095954}' />
    </window>
    <window class='worksheet' maximized='true' name='Q1V2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{20A2DEA7-521A-42B3-A29A-4E6BC9D7F749}' />
    </window>
    <window class='worksheet' name='Q2V1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[none:magType:nk]</field>
            <field>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[yr:Date - Split 1:ok]</field>
            <field>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[yr:Date:ok]</field>
            <field>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[yr:Time:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{767ACF54-C7A2-4FA0-8FDA-3DFAE809FCBF}' />
    </window>
    <window class='worksheet' name='Q2V2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[avg:longitude:qk]</field>
            <field>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[none:latitude:qk]</field>
            <field>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[yr:Date:ok]</field>
            <field>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[yr:Time:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E0118365-5CAC-45D9-8269-0594FA901599}' />
    </window>
    <window class='worksheet' name='Q3V1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.1w3s5me1qqv7sx13qvl1d1xochkj].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{2F8353E1-6E7E-434F-B594-288B7526F53D}' />
    </window>
    <window class='worksheet' name='Q3V2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{798E7A3F-0077-46D1-B052-C7C83541D885}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Q1V1' width='192'>
      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
      nEf0fwFbn3iHIHVakwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Q1V2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Q2V1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Q2V2' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Q3V1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Q3V2' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAACFUlEQVR4nO3TMQEAIAzAMMC/5yFjRxMFfXpnZg5Eve0A2GQA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQD
      kGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBp
      BiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA
      0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDN
      AKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxA
      mgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKR9Y+0F
      fBUOM1sAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
